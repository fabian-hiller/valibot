import*as core from'zod/v4/core';import{$ZodError,util,$brand,$input,$output,GlobalMeta,output as output$1,$ZodErrorMap as $ZodErrorMap$1,$ZodTypes,$ZodFlattenedError,$ZodFormattedError,clone,config,_endsWith,flattenError,formatError,function as _function,globalRegistry,_gt,_gte,_includes,infer,input as input$1,_length,_lowercase,_lt,_lte,_maxLength,_maxSize,_mime,_minLength,_minSize,_multipleOf,_negative,_nonnegative,_nonpositive,_normalize,_overwrite,_positive,prettifyError,_property,_regex,regexes,registry,_size,_startsWith,toJSONSchema,_toLowerCase,_toUpperCase,treeifyError,_trim,_uppercase}from'zod/v4/core';export{core};export{$brand,$input,$output,GlobalMeta,output as Infer,output as TypeOf,$ZodErrorMap as ZodErrorMap,$ZodTypes as ZodFirstPartySchemaTypes,$ZodFlattenedError as ZodFlattenedError,$ZodFormattedError as ZodFormattedError,clone,config,_endsWith as endsWith,flattenError,formatError,function,globalRegistry,_gt as gt,_gte as gte,_includes as includes,infer,input,_length as length,_lowercase as lowercase,_lt as lt,_lte as lte,_maxLength as maxLength,_maxSize as maxSize,_mime as mime,_minLength as minLength,_minSize as minSize,_multipleOf as multipleOf,_negative as negative,_nonnegative as nonnegative,_nonpositive as nonpositive,_normalize as normalize,output,_overwrite as overwrite,_positive as positive,prettifyError,_property as property,_regex as regex,regexes,registry,_size as size,_startsWith as startsWith,toJSONSchema,_toLowerCase as toLowerCase,_toUpperCase as toUpperCase,treeifyError,_trim as trim,_uppercase as uppercase}from'zod/v4/core';type ZodIssue=core.$ZodIssue;interface ZodError<T=unknown>extends $ZodError<T>{format():core.$ZodFormattedError<T>;format<U>(mapper:(issue:core.$ZodIssue)=>U):core.$ZodFormattedError<T,U>;flatten():core.$ZodFlattenedError<T>;flatten<U>(mapper:(issue:core.$ZodIssue)=>U):core.$ZodFlattenedError<T,U>;addIssue(issue:core.$ZodIssue):void;addIssues(issues:core.$ZodIssue[]):void;isEmpty:boolean;}declare const ZodError:core.$constructor<ZodError>;declare const ZodRealError:core.$constructor<ZodError>;type IssueData=core.$ZodRawIssue;type ZodSafeParseResult<T>=ZodSafeParseSuccess<T>|ZodSafeParseError<T>;type ZodSafeParseSuccess<T>={success:true;data:T;error?:never;};type ZodSafeParseError<T>={success:false;data?:never;error:ZodError<T>;};declare const parse:<T extends core.$ZodType>(schema:T,value:unknown,_ctx?:core.ParseContext<core.$ZodIssue>,_params?:{callee?:core.util.AnyFunc;Err?:core.$ZodErrorClass;})=>core.output<T>;declare const parseAsync:<T extends core.$ZodType>(schema:T,value:unknown,_ctx?:core.ParseContext<core.$ZodIssue>,_params?:{callee?:core.util.AnyFunc;Err?:core.$ZodErrorClass;})=>Promise<core.output<T>>;declare const safeParse:<T extends core.$ZodType>(schema:T,value:unknown,_ctx?:core.ParseContext<core.$ZodIssue>)=>ZodSafeParseResult<core.output<T>>;declare const safeParseAsync:<T extends core.$ZodType>(schema:T,value:unknown,_ctx?:core.ParseContext<core.$ZodIssue>)=>Promise<ZodSafeParseResult<core.output<T>>>;interface RefinementCtx<T=unknown>extends core.ParsePayload<T>{addIssue(arg:string|core.$ZodRawIssue|Partial<core.$ZodIssueCustom>):void;}interface _ZodType<out Internals extends core.$ZodTypeInternals=core.$ZodTypeInternals>extends ZodType<any,any,Internals>{}interface ZodType<out Output=unknown,out Input=unknown,out Internals extends core.$ZodTypeInternals<Output,Input>=core.$ZodTypeInternals<Output,Input>>extends core.$ZodType<Output,Input,Internals>{def:Internals["def"];type:Internals["def"]["type"];_def:Internals["def"];_output:Internals["output"];_input:Internals["input"];check(...checks:(core.CheckFn<core.output<this>>|core.$ZodCheck<core.output<this>>)[]):this;clone(def?:Internals["def"],params?:{parent:boolean;}):this;register<R extends core.$ZodRegistry>(registry:R,...meta:this extends R["_schema"]?undefined extends R["_meta"]?[core.$replace<R["_meta"],this>?]:[core.$replace<R["_meta"],this>]:["Incompatible schema"]):this;brand<T extends PropertyKey=PropertyKey>(value?:T):PropertyKey extends T?this:core.$ZodBranded<this,T>;parse(data:unknown,params?:core.ParseContext<core.$ZodIssue>):core.output<this>;safeParse(data:unknown,params?:core.ParseContext<core.$ZodIssue>):ZodSafeParseResult<core.output<this>>;parseAsync(data:unknown,params?:core.ParseContext<core.$ZodIssue>):Promise<core.output<this>>;safeParseAsync(data:unknown,params?:core.ParseContext<core.$ZodIssue>):Promise<ZodSafeParseResult<core.output<this>>>;spa:(data:unknown,params?:core.ParseContext<core.$ZodIssue>)=>Promise<ZodSafeParseResult<core.output<this>>>;refine(check:(arg:core.output<this>)=>unknown|Promise<unknown>,params?:string|core.$ZodCustomParams):this;superRefine(refinement:(arg:core.output<this>,ctx:RefinementCtx<core.output<this>>)=>void|Promise<void>):this;overwrite(fn:(x:core.output<this>)=>core.output<this>):this;optional():ZodOptional<this>;nonoptional(params?:string|core.$ZodNonOptionalParams):ZodNonOptional<this>;nullable():ZodNullable<this>;nullish():ZodOptional<ZodNullable<this>>;default(def:core.output<this>):ZodDefault<this>;default(def:()=>util.NoUndefined<core.output<this>>):ZodDefault<this>;prefault(def:()=>core.input<this>):ZodPrefault<this>;prefault(def:core.input<this>):ZodPrefault<this>;array():ZodArray<this>;or<T extends core.SomeType>(option:T):ZodUnion<[this,T]>;and<T extends core.SomeType>(incoming:T):ZodIntersection<this,T>;transform<NewOut>(transform:(arg:core.output<this>,ctx:RefinementCtx<core.output<this>>)=>NewOut|Promise<NewOut>):ZodPipe<this,ZodTransform<Awaited<NewOut>,core.output<this>>>;catch(def:core.output<this>):ZodCatch<this>;catch(def:(ctx:core.$ZodCatchCtx)=>core.output<this>):ZodCatch<this>;pipe<T extends core.$ZodType<any,core.output<this>>>(target:T|core.$ZodType<any,core.output<this>>):ZodPipe<this,T>;readonly():ZodReadonly<this>;describe(description:string):this;description?:string;meta():core.$replace<core.GlobalMeta,this>|undefined;meta(data:core.$replace<core.GlobalMeta,this>):this;isOptional():boolean;isNullable():boolean;}declare const ZodType:core.$constructor<ZodType>;interface _ZodString<T extends core.$ZodStringInternals<unknown>=core.$ZodStringInternals<unknown>>extends _ZodType<T>{format:string|null;minLength:number|null;maxLength:number|null;regex(regex:RegExp,params?:string|core.$ZodCheckRegexParams):this;includes(value:string,params?:core.$ZodCheckIncludesParams):this;startsWith(value:string,params?:string|core.$ZodCheckStartsWithParams):this;endsWith(value:string,params?:string|core.$ZodCheckEndsWithParams):this;min(minLength:number,params?:string|core.$ZodCheckMinLengthParams):this;max(maxLength:number,params?:string|core.$ZodCheckMaxLengthParams):this;length(len:number,params?:string|core.$ZodCheckLengthEqualsParams):this;nonempty(params?:string|core.$ZodCheckMinLengthParams):this;lowercase(params?:string|core.$ZodCheckLowerCaseParams):this;uppercase(params?:string|core.$ZodCheckUpperCaseParams):this;trim():this;normalize(form?:"NFC"|"NFD"|"NFKC"|"NFKD"|(string&{})):this;toLowerCase():this;toUpperCase():this;}declare const _ZodString:core.$constructor<_ZodString>;interface ZodString extends _ZodString<core.$ZodStringInternals<string>>{email(params?:string|core.$ZodCheckEmailParams):this;url(params?:string|core.$ZodCheckURLParams):this;jwt(params?:string|core.$ZodCheckJWTParams):this;emoji(params?:string|core.$ZodCheckEmojiParams):this;guid(params?:string|core.$ZodCheckGUIDParams):this;uuid(params?:string|core.$ZodCheckUUIDParams):this;uuidv4(params?:string|core.$ZodCheckUUIDParams):this;uuidv6(params?:string|core.$ZodCheckUUIDParams):this;uuidv7(params?:string|core.$ZodCheckUUIDParams):this;nanoid(params?:string|core.$ZodCheckNanoIDParams):this;guid(params?:string|core.$ZodCheckGUIDParams):this;cuid(params?:string|core.$ZodCheckCUIDParams):this;cuid2(params?:string|core.$ZodCheckCUID2Params):this;ulid(params?:string|core.$ZodCheckULIDParams):this;base64(params?:string|core.$ZodCheckBase64Params):this;base64url(params?:string|core.$ZodCheckBase64URLParams):this;xid(params?:string|core.$ZodCheckXIDParams):this;ksuid(params?:string|core.$ZodCheckKSUIDParams):this;ipv4(params?:string|core.$ZodCheckIPv4Params):this;ipv6(params?:string|core.$ZodCheckIPv6Params):this;cidrv4(params?:string|core.$ZodCheckCIDRv4Params):this;cidrv6(params?:string|core.$ZodCheckCIDRv6Params):this;e164(params?:string|core.$ZodCheckE164Params):this;datetime(params?:string|core.$ZodCheckISODateTimeParams):this;date(params?:string|core.$ZodCheckISODateParams):this;time(params?:string|core.$ZodCheckISOTimeParams):this;duration(params?:string|core.$ZodCheckISODurationParams):this;}declare const ZodString:core.$constructor<ZodString>;declare function string$1(params?:string|core.$ZodStringParams):ZodString;interface ZodStringFormat<Format extends core.$ZodStringFormats=core.$ZodStringFormats>extends _ZodString<core.$ZodStringFormatInternals<Format>>{}declare const ZodStringFormat:core.$constructor<ZodStringFormat>;interface ZodEmail extends ZodStringFormat<"email">{_zod:core.$ZodEmailInternals;}declare const ZodEmail:core.$constructor<ZodEmail>;declare function email(params?:string|core.$ZodEmailParams):ZodEmail;interface ZodGUID extends ZodStringFormat<"guid">{_zod:core.$ZodGUIDInternals;}declare const ZodGUID:core.$constructor<ZodGUID>;declare function guid(params?:string|core.$ZodGUIDParams):ZodGUID;interface ZodUUID extends ZodStringFormat<"uuid">{_zod:core.$ZodUUIDInternals;}declare const ZodUUID:core.$constructor<ZodUUID>;declare function uuid(params?:string|core.$ZodUUIDParams):ZodUUID;declare function uuidv4(params?:string|core.$ZodUUIDv4Params):ZodUUID;declare function uuidv6(params?:string|core.$ZodUUIDv6Params):ZodUUID;declare function uuidv7(params?:string|core.$ZodUUIDv7Params):ZodUUID;interface ZodURL extends ZodStringFormat<"url">{_zod:core.$ZodURLInternals;}declare const ZodURL:core.$constructor<ZodURL>;declare function url(params?:string|core.$ZodURLParams):ZodURL;interface ZodEmoji extends ZodStringFormat<"emoji">{_zod:core.$ZodEmojiInternals;}declare const ZodEmoji:core.$constructor<ZodEmoji>;declare function emoji(params?:string|core.$ZodEmojiParams):ZodEmoji;interface ZodNanoID extends ZodStringFormat<"nanoid">{_zod:core.$ZodNanoIDInternals;}declare const ZodNanoID:core.$constructor<ZodNanoID>;declare function nanoid(params?:string|core.$ZodNanoIDParams):ZodNanoID;interface ZodCUID extends ZodStringFormat<"cuid">{_zod:core.$ZodCUIDInternals;}declare const ZodCUID:core.$constructor<ZodCUID>;declare function cuid(params?:string|core.$ZodCUIDParams):ZodCUID;interface ZodCUID2 extends ZodStringFormat<"cuid2">{_zod:core.$ZodCUID2Internals;}declare const ZodCUID2:core.$constructor<ZodCUID2>;declare function cuid2(params?:string|core.$ZodCUID2Params):ZodCUID2;interface ZodULID extends ZodStringFormat<"ulid">{_zod:core.$ZodULIDInternals;}declare const ZodULID:core.$constructor<ZodULID>;declare function ulid(params?:string|core.$ZodULIDParams):ZodULID;interface ZodXID extends ZodStringFormat<"xid">{_zod:core.$ZodXIDInternals;}declare const ZodXID:core.$constructor<ZodXID>;declare function xid(params?:string|core.$ZodXIDParams):ZodXID;interface ZodKSUID extends ZodStringFormat<"ksuid">{_zod:core.$ZodKSUIDInternals;}declare const ZodKSUID:core.$constructor<ZodKSUID>;declare function ksuid(params?:string|core.$ZodKSUIDParams):ZodKSUID;interface ZodIPv4 extends ZodStringFormat<"ipv4">{_zod:core.$ZodIPv4Internals;}declare const ZodIPv4:core.$constructor<ZodIPv4>;declare function ipv4(params?:string|core.$ZodIPv4Params):ZodIPv4;interface ZodIPv6 extends ZodStringFormat<"ipv6">{_zod:core.$ZodIPv6Internals;}declare const ZodIPv6:core.$constructor<ZodIPv6>;declare function ipv6(params?:string|core.$ZodIPv6Params):ZodIPv6;interface ZodCIDRv4 extends ZodStringFormat<"cidrv4">{_zod:core.$ZodCIDRv4Internals;}declare const ZodCIDRv4:core.$constructor<ZodCIDRv4>;declare function cidrv4(params?:string|core.$ZodCIDRv4Params):ZodCIDRv4;interface ZodCIDRv6 extends ZodStringFormat<"cidrv6">{_zod:core.$ZodCIDRv6Internals;}declare const ZodCIDRv6:core.$constructor<ZodCIDRv6>;declare function cidrv6(params?:string|core.$ZodCIDRv6Params):ZodCIDRv6;interface ZodBase64 extends ZodStringFormat<"base64">{_zod:core.$ZodBase64Internals;}declare const ZodBase64:core.$constructor<ZodBase64>;declare function base64(params?:string|core.$ZodBase64Params):ZodBase64;interface ZodBase64URL extends ZodStringFormat<"base64url">{_zod:core.$ZodBase64URLInternals;}declare const ZodBase64URL:core.$constructor<ZodBase64URL>;declare function base64url(params?:string|core.$ZodBase64URLParams):ZodBase64URL;interface ZodE164 extends ZodStringFormat<"e164">{_zod:core.$ZodE164Internals;}declare const ZodE164:core.$constructor<ZodE164>;declare function e164(params?:string|core.$ZodE164Params):ZodE164;interface ZodJWT extends ZodStringFormat<"jwt">{_zod:core.$ZodJWTInternals;}declare const ZodJWT:core.$constructor<ZodJWT>;declare function jwt(params?:string|core.$ZodJWTParams):ZodJWT;interface _ZodNumber<Internals extends core.$ZodNumberInternals=core.$ZodNumberInternals>extends _ZodType<Internals>{gt(value:number,params?:string|core.$ZodCheckGreaterThanParams):this;gte(value:number,params?:string|core.$ZodCheckGreaterThanParams):this;min(value:number,params?:string|core.$ZodCheckGreaterThanParams):this;lt(value:number,params?:string|core.$ZodCheckLessThanParams):this;lte(value:number,params?:string|core.$ZodCheckLessThanParams):this;max(value:number,params?:string|core.$ZodCheckLessThanParams):this;int(params?:string|core.$ZodCheckNumberFormatParams):this;safe(params?:string|core.$ZodCheckNumberFormatParams):this;positive(params?:string|core.$ZodCheckGreaterThanParams):this;nonnegative(params?:string|core.$ZodCheckGreaterThanParams):this;negative(params?:string|core.$ZodCheckLessThanParams):this;nonpositive(params?:string|core.$ZodCheckLessThanParams):this;multipleOf(value:number,params?:string|core.$ZodCheckMultipleOfParams):this;step(value:number,params?:string|core.$ZodCheckMultipleOfParams):this;finite(params?:unknown):this;minValue:number|null;maxValue:number|null;isInt:boolean;isFinite:boolean;format:string|null;}interface ZodNumber extends _ZodNumber<core.$ZodNumberInternals<number>>{}declare const ZodNumber:core.$constructor<ZodNumber>;declare function number$1(params?:string|core.$ZodNumberParams):ZodNumber;interface ZodNumberFormat extends ZodNumber{_zod:core.$ZodNumberFormatInternals;}declare const ZodNumberFormat:core.$constructor<ZodNumberFormat>;interface ZodInt extends ZodNumberFormat{}declare function int(params?:string|core.$ZodCheckNumberFormatParams):ZodInt;interface ZodFloat32 extends ZodNumberFormat{}declare function float32(params?:string|core.$ZodCheckNumberFormatParams):ZodFloat32;interface ZodFloat64 extends ZodNumberFormat{}declare function float64(params?:string|core.$ZodCheckNumberFormatParams):ZodFloat64;interface ZodInt32 extends ZodNumberFormat{}declare function int32(params?:string|core.$ZodCheckNumberFormatParams):ZodInt32;interface ZodUInt32 extends ZodNumberFormat{}declare function uint32(params?:string|core.$ZodCheckNumberFormatParams):ZodUInt32;interface _ZodBoolean<T extends core.$ZodBooleanInternals=core.$ZodBooleanInternals>extends _ZodType<T>{}interface ZodBoolean extends _ZodBoolean<core.$ZodBooleanInternals<boolean>>{}declare const ZodBoolean:core.$constructor<ZodBoolean>;declare function boolean$1(params?:string|core.$ZodBooleanParams):ZodBoolean;interface _ZodBigInt<T extends core.$ZodBigIntInternals=core.$ZodBigIntInternals>extends _ZodType<T>{gte(value:bigint,params?:string|core.$ZodCheckGreaterThanParams):this;min(value:bigint,params?:string|core.$ZodCheckGreaterThanParams):this;gt(value:bigint,params?:string|core.$ZodCheckGreaterThanParams):this;lte(value:bigint,params?:string|core.$ZodCheckLessThanParams):this;max(value:bigint,params?:string|core.$ZodCheckLessThanParams):this;lt(value:bigint,params?:string|core.$ZodCheckLessThanParams):this;positive(params?:string|core.$ZodCheckGreaterThanParams):this;negative(params?:string|core.$ZodCheckLessThanParams):this;nonpositive(params?:string|core.$ZodCheckLessThanParams):this;nonnegative(params?:string|core.$ZodCheckGreaterThanParams):this;multipleOf(value:bigint,params?:string|core.$ZodCheckMultipleOfParams):this;minValue:bigint|null;maxValue:bigint|null;format:string|null;}interface ZodBigInt extends _ZodBigInt<core.$ZodBigIntInternals<bigint>>{}declare const ZodBigInt:core.$constructor<ZodBigInt>;declare function bigint$1(params?:string|core.$ZodBigIntParams):ZodBigInt;interface ZodBigIntFormat extends ZodBigInt{_zod:core.$ZodBigIntFormatInternals;}declare const ZodBigIntFormat:core.$constructor<ZodBigIntFormat>;declare function int64(params?:string|core.$ZodBigIntFormatParams):ZodBigIntFormat;declare function uint64(params?:string|core.$ZodBigIntFormatParams):ZodBigIntFormat;interface ZodSymbol extends _ZodType<core.$ZodSymbolInternals>{}declare const ZodSymbol:core.$constructor<ZodSymbol>;declare function symbol(params?:string|core.$ZodSymbolParams):ZodSymbol;interface ZodUndefined extends _ZodType<core.$ZodUndefinedInternals>{}declare const ZodUndefined:core.$constructor<ZodUndefined>;declare function _undefined(params?:string|core.$ZodUndefinedParams):ZodUndefined;interface ZodNull extends _ZodType<core.$ZodNullInternals>{}declare const ZodNull:core.$constructor<ZodNull>;declare function _null(params?:string|core.$ZodNullParams):ZodNull;interface ZodAny extends _ZodType<core.$ZodAnyInternals>{}declare const ZodAny:core.$constructor<ZodAny>;declare function any():ZodAny;interface ZodUnknown extends _ZodType<core.$ZodUnknownInternals>{}declare const ZodUnknown:core.$constructor<ZodUnknown>;declare function unknown():ZodUnknown;interface ZodNever extends _ZodType<core.$ZodNeverInternals>{}declare const ZodNever:core.$constructor<ZodNever>;declare function never(params?:string|core.$ZodNeverParams):ZodNever;interface ZodVoid extends _ZodType<core.$ZodVoidInternals>{}declare const ZodVoid:core.$constructor<ZodVoid>;declare function _void(params?:string|core.$ZodVoidParams):ZodVoid;interface _ZodDate<T extends core.$ZodDateInternals=core.$ZodDateInternals>extends _ZodType<T>{min(value:number|Date,params?:string|core.$ZodCheckGreaterThanParams):this;max(value:number|Date,params?:string|core.$ZodCheckLessThanParams):this;minDate:Date|null;maxDate:Date|null;}interface ZodDate extends _ZodDate<core.$ZodDateInternals<Date>>{}declare const ZodDate:core.$constructor<ZodDate>;declare function date$2(params?:string|core.$ZodDateParams):ZodDate;interface ZodArray<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodArrayInternals<T>>,core.$ZodArray<T>{element:T;min(minLength:number,params?:string|core.$ZodCheckMinLengthParams):this;nonempty(params?:string|core.$ZodCheckMinLengthParams):this;max(maxLength:number,params?:string|core.$ZodCheckMaxLengthParams):this;length(len:number,params?:string|core.$ZodCheckLengthEqualsParams):this;unwrap():T;}declare const ZodArray:core.$constructor<ZodArray>;declare function array<T extends core.SomeType>(element:T,params?:string|core.$ZodArrayParams):ZodArray<T>;declare function keyof<T extends ZodObject>(schema:T):ZodLiteral<keyof T["_zod"]["output"]>;interface ZodObject<out Shape extends core.$ZodShape=core.$ZodLooseShape,out Config extends core.$ZodObjectConfig=core.$ZodObjectConfig>extends _ZodType<core.$ZodObjectInternals<Shape,Config>>,core.$ZodObject<Shape,Config>{shape:Shape;keyof():ZodEnum<util.ToEnum<keyof Shape&string>>;catchall<T extends core.SomeType>(schema:T):ZodObject<Shape,core.$catchall<T>>;passthrough():ZodObject<Shape,core.$loose>;loose():ZodObject<Shape,core.$loose>;strict():ZodObject<Shape,core.$strict>;strip():ZodObject<Shape,core.$strict>;extend<U extends core.$ZodLooseShape&Partial<Record<keyof Shape,core.SomeType>>>(shape:U):ZodObject<util.Extend<Shape,U>,Config>;merge<U extends ZodObject>(other:U):ZodObject<util.Extend<Shape,U["shape"]>,U["_zod"]["config"]>;pick<M extends util.Exactly<util.Mask<keyof Shape>,M>>(mask:M):ZodObject<util.Flatten<Pick<Shape,Extract<keyof Shape,keyof M>>>,Config>;omit<M extends util.Exactly<util.Mask<keyof Shape>,M>>(mask:M):ZodObject<util.Flatten<Omit<Shape,Extract<keyof Shape,keyof M>>>,Config>;partial():ZodObject<{[k in keyof Shape]:ZodOptional<Shape[k]>;},Config>;partial<M extends util.Exactly<util.Mask<keyof Shape>,M>>(mask:M):ZodObject<{[k in keyof Shape]:k extends keyof M?ZodOptional<Shape[k]>:Shape[k];},Config>;required():ZodObject<{[k in keyof Shape]:ZodNonOptional<Shape[k]>;},Config>;required<M extends util.Exactly<util.Mask<keyof Shape>,M>>(mask:M):ZodObject<{[k in keyof Shape]:k extends keyof M?ZodNonOptional<Shape[k]>:Shape[k];},Config>;}declare const ZodObject:core.$constructor<ZodObject>;declare function object<T extends core.$ZodLooseShape=Partial<Record<never,core.SomeType>>>(shape?:T,params?:string|core.$ZodObjectParams):ZodObject<util.Writeable<T>,core.$strip>;declare function strictObject<T extends core.$ZodLooseShape>(shape:T,params?:string|core.$ZodObjectParams):ZodObject<T,core.$strict>;declare function looseObject<T extends core.$ZodLooseShape>(shape:T,params?:string|core.$ZodObjectParams):ZodObject<T,core.$loose>;interface ZodUnion<T extends readonly core.SomeType[]=readonly core.$ZodType[]>extends _ZodType<core.$ZodUnionInternals<T>>,core.$ZodUnion<T>{options:T;}declare const ZodUnion:core.$constructor<ZodUnion>;declare function union<const T extends readonly core.SomeType[]>(options:T,params?:string|core.$ZodUnionParams):ZodUnion<T>;interface ZodDiscriminatedUnion<Options extends readonly core.SomeType[]=readonly core.$ZodType[]>extends ZodUnion<Options>,core.$ZodDiscriminatedUnion<Options>{_zod:core.$ZodDiscriminatedUnionInternals<Options>;}declare const ZodDiscriminatedUnion:core.$constructor<ZodDiscriminatedUnion>;declare function discriminatedUnion<Types extends readonly[core.$ZodTypeDiscriminable,...core.$ZodTypeDiscriminable[]]>(discriminator:string,options:Types,params?:string|core.$ZodDiscriminatedUnionParams):ZodDiscriminatedUnion<Types>;interface ZodIntersection<A extends core.SomeType=core.$ZodType,B extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodIntersectionInternals<A,B>>,core.$ZodIntersection<A,B>{}declare const ZodIntersection:core.$constructor<ZodIntersection>;declare function intersection<T extends core.SomeType,U extends core.SomeType>(left:T,right:U):ZodIntersection<T,U>;interface ZodTuple<T extends util.TupleItems=readonly core.$ZodType[],Rest extends core.SomeType|null=core.$ZodType|null>extends _ZodType<core.$ZodTupleInternals<T,Rest>>,core.$ZodTuple<T,Rest>{rest<Rest extends core.SomeType=core.$ZodType>(rest:Rest):ZodTuple<T,Rest>;}declare const ZodTuple:core.$constructor<ZodTuple>;declare function tuple<T extends readonly[core.SomeType,...core.SomeType[]]>(items:T,params?:string|core.$ZodTupleParams):ZodTuple<T,null>;declare function tuple<T extends readonly[core.SomeType,...core.SomeType[]],Rest extends core.SomeType>(items:T,rest:Rest,params?:string|core.$ZodTupleParams):ZodTuple<T,Rest>;declare function tuple(items:[],params?:string|core.$ZodTupleParams):ZodTuple<[],null>;interface ZodRecord<Key extends core.$ZodRecordKey=core.$ZodRecordKey,Value extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodRecordInternals<Key,Value>>,core.$ZodRecord<Key,Value>{keyType:Key;valueType:Value;}declare const ZodRecord:core.$constructor<ZodRecord>;declare function record<Key extends core.$ZodRecordKey,Value extends core.SomeType>(keyType:Key,valueType:Value,params?:string|core.$ZodRecordParams):ZodRecord<Key,Value>;declare function partialRecord<Key extends core.$ZodRecordKey,Value extends core.SomeType>(keyType:Key,valueType:Value,params?:string|core.$ZodRecordParams):ZodRecord<ZodUnion<[Key,ZodNever]>,Value>;interface ZodMap<Key extends core.SomeType=core.$ZodType,Value extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodMapInternals<Key,Value>>,core.$ZodMap<Key,Value>{keyType:Key;valueType:Value;}declare const ZodMap:core.$constructor<ZodMap>;declare function map<Key extends core.SomeType,Value extends core.SomeType>(keyType:Key,valueType:Value,params?:string|core.$ZodMapParams):ZodMap<Key,Value>;interface ZodSet<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodSetInternals<T>>,core.$ZodSet<T>{min(minSize:number,params?:string|core.$ZodCheckMinSizeParams):this;nonempty(params?:string|core.$ZodCheckMinSizeParams):this;max(maxSize:number,params?:string|core.$ZodCheckMaxSizeParams):this;size(size:number,params?:string|core.$ZodCheckSizeEqualsParams):this;}declare const ZodSet:core.$constructor<ZodSet>;declare function set<Value extends core.SomeType>(valueType:Value,params?:string|core.$ZodSetParams):ZodSet<Value>;interface ZodEnum<out T extends util.EnumLike=util.EnumLike>extends _ZodType<core.$ZodEnumInternals<T>>,core.$ZodEnum<T>{enum:T;options:Array<T[keyof T]>;extract<const U extends readonly(keyof T)[]>(values:U,params?:string|core.$ZodEnumParams):ZodEnum<util.Flatten<Pick<T,U[number]>>>;exclude<const U extends readonly(keyof T)[]>(values:U,params?:string|core.$ZodEnumParams):ZodEnum<util.Flatten<Omit<T,U[number]>>>;}declare const ZodEnum:core.$constructor<ZodEnum>;declare function _enum<const T extends readonly string[]>(values:T,params?:string|core.$ZodEnumParams):ZodEnum<util.ToEnum<T[number]>>;declare function _enum<const T extends util.EnumLike>(entries:T,params?:string|core.$ZodEnumParams):ZodEnum<T>;declare function nativeEnum<T extends util.EnumLike>(entries:T,params?:string|core.$ZodEnumParams):ZodEnum<T>;interface ZodLiteral<T extends util.Primitive=util.Primitive>extends _ZodType<core.$ZodLiteralInternals<T>>,core.$ZodLiteral<T>{values:Set<T>;value:T;}declare const ZodLiteral:core.$constructor<ZodLiteral>;declare function literal<const T extends Array<util.Literal>>(value:T,params?:string|core.$ZodLiteralParams):ZodLiteral<T[number]>;declare function literal<const T extends util.Literal>(value:T,params?:string|core.$ZodLiteralParams):ZodLiteral<T>;interface ZodFile extends _ZodType<core.$ZodFileInternals>,core.$ZodFile{min(size:number,params?:string|core.$ZodCheckMinSizeParams):this;max(size:number,params?:string|core.$ZodCheckMaxSizeParams):this;mime(types:util.MimeTypes|Array<util.MimeTypes>,params?:string|core.$ZodCheckMimeTypeParams):this;}declare const ZodFile:core.$constructor<ZodFile>;declare function file(params?:string|core.$ZodFileParams):ZodFile;interface ZodTransform<O=unknown,I=unknown>extends _ZodType<core.$ZodTransformInternals<O,I>>,core.$ZodTransform<O,I>{}declare const ZodTransform:core.$constructor<ZodTransform>;declare function transform<I=unknown,O=I>(fn:(input:I,ctx:core.ParsePayload)=>O):ZodTransform<Awaited<O>,I>;interface ZodOptional<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodOptionalInternals<T>>,core.$ZodOptional<T>{unwrap():T;}declare const ZodOptional:core.$constructor<ZodOptional>;declare function optional<T extends core.SomeType>(innerType:T):ZodOptional<T>;interface ZodNullable<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodNullableInternals<T>>,core.$ZodNullable<T>{unwrap():T;}declare const ZodNullable:core.$constructor<ZodNullable>;declare function nullable<T extends core.SomeType>(innerType:T):ZodNullable<T>;declare function nullish<T extends core.SomeType>(innerType:T):ZodOptional<ZodNullable<T>>;interface ZodDefault<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodDefaultInternals<T>>,core.$ZodDefault<T>{unwrap():T;removeDefault():T;}declare const ZodDefault:core.$constructor<ZodDefault>;declare function _default<T extends core.SomeType>(innerType:T,defaultValue:util.NoUndefined<core.output<T>>|(()=>util.NoUndefined<core.output<T>>)):ZodDefault<T>;interface ZodPrefault<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodPrefaultInternals<T>>,core.$ZodPrefault<T>{unwrap():T;}declare const ZodPrefault:core.$constructor<ZodPrefault>;declare function prefault<T extends core.SomeType>(innerType:T,defaultValue:core.input<T>|(()=>core.input<T>)):ZodPrefault<T>;interface ZodNonOptional<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodNonOptionalInternals<T>>,core.$ZodNonOptional<T>{unwrap():T;}declare const ZodNonOptional:core.$constructor<ZodNonOptional>;declare function nonoptional<T extends core.SomeType>(innerType:T,params?:string|core.$ZodNonOptionalParams):ZodNonOptional<T>;interface ZodSuccess<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodSuccessInternals<T>>,core.$ZodSuccess<T>{unwrap():T;}declare const ZodSuccess:core.$constructor<ZodSuccess>;declare function success<T extends core.SomeType>(innerType:T):ZodSuccess<T>;interface ZodCatch<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodCatchInternals<T>>,core.$ZodCatch<T>{unwrap():T;removeCatch():T;}declare const ZodCatch:core.$constructor<ZodCatch>;declare function _catch<T extends core.SomeType>(innerType:T,catchValue:core.output<T>|((ctx:core.$ZodCatchCtx)=>core.output<T>)):ZodCatch<T>;interface ZodNaN extends _ZodType<core.$ZodNaNInternals>,core.$ZodNaN{}declare const ZodNaN:core.$constructor<ZodNaN>;declare function nan(params?:string|core.$ZodNaNParams):ZodNaN;interface ZodPipe<A extends core.SomeType=core.$ZodType,B extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodPipeInternals<A,B>>,core.$ZodPipe<A,B>{in:A;out:B;}declare const ZodPipe:core.$constructor<ZodPipe>;declare function pipe<const A extends core.SomeType,B extends core.$ZodType<unknown,core.output<A>>=core.$ZodType<unknown,core.output<A>>>(in_:A,out:B|core.$ZodType<unknown,core.output<A>>):ZodPipe<A,B>;interface ZodReadonly<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodReadonlyInternals<T>>,core.$ZodReadonly<T>{}declare const ZodReadonly:core.$constructor<ZodReadonly>;declare function readonly<T extends core.SomeType>(innerType:T):ZodReadonly<T>;interface ZodTemplateLiteral<Template extends string=string>extends _ZodType<core.$ZodTemplateLiteralInternals<Template>>,core.$ZodTemplateLiteral<Template>{}declare const ZodTemplateLiteral:core.$constructor<ZodTemplateLiteral>;declare function templateLiteral<const Parts extends core.$ZodTemplateLiteralPart[]>(parts:Parts,params?:string|core.$ZodTemplateLiteralParams):ZodTemplateLiteral<core.$PartsToTemplateLiteral<Parts>>;interface ZodLazy<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodLazyInternals<T>>,core.$ZodLazy<T>{unwrap():T;}declare const ZodLazy:core.$constructor<ZodLazy>;declare function lazy<T extends core.SomeType>(getter:()=>T):ZodLazy<T>;interface ZodPromise<T extends core.SomeType=core.$ZodType>extends _ZodType<core.$ZodPromiseInternals<T>>,core.$ZodPromise<T>{unwrap():T;}declare const ZodPromise:core.$constructor<ZodPromise>;declare function promise<T extends core.SomeType>(innerType:T):ZodPromise<T>;interface ZodCustom<O=unknown,I=unknown>extends _ZodType<core.$ZodCustomInternals<O,I>>,core.$ZodCustom<O,I>{}declare const ZodCustom:core.$constructor<ZodCustom>;declare function check<O=unknown>(fn:core.CheckFn<O>,params?:string|core.$ZodCustomParams):core.$ZodCheck<O>;declare function custom<O>(fn?:(data:unknown)=>unknown,_params?:string|core.$ZodCustomParams|undefined):ZodCustom<O,O>;declare function refine<T>(fn:(arg:NoInfer<T>)=>util.MaybeAsync<unknown>,_params?:string|core.$ZodCustomParams):core.$ZodCheck<T>;declare function superRefine<T>(fn:(arg:T,payload:RefinementCtx<T>)=>void|Promise<void>,params?:string|core.$ZodCustomParams):core.$ZodCheck<T>;type ZodInstanceOfParams=core.Params<ZodCustom,core.$ZodIssueCustom,"type"|"check"|"checks"|"fn"|"abort"|"error"|"params"|"path">;declare function _instanceof<T extends typeof util.Class>(cls:T,params?:ZodInstanceOfParams):ZodCustom<InstanceType<T>,InstanceType<T>>;declare const stringbool:(_params?:string|core.$ZodStringBoolParams)=>ZodPipe<ZodUnknown,ZodBoolean>;type _ZodJSONSchema=ZodUnion<[
ZodString,ZodNumber,ZodBoolean,ZodNull,ZodArray<ZodJSONSchema>,ZodRecord<ZodString,ZodJSONSchema>]>;type _ZodJSONSchemaInternals=_ZodJSONSchema["_zod"];interface ZodJSONSchemaInternals extends _ZodJSONSchemaInternals{output:util.JSONType;input:util.JSONType;}interface ZodJSONSchema extends _ZodJSONSchema{_zod:ZodJSONSchemaInternals;}declare function json(params?:string|core.$ZodCustomParams):ZodJSONSchema;declare function preprocess<A,U extends core.SomeType,B=unknown>(fn:(arg:B,ctx:RefinementCtx)=>A,schema:U):ZodPipe<ZodTransform<A,B>,U>;declare const ZodIssueCode:{readonly invalid_type:"invalid_type";readonly too_big:"too_big";readonly too_small:"too_small";readonly invalid_format:"invalid_format";readonly not_multiple_of:"not_multiple_of";readonly unrecognized_keys:"unrecognized_keys";readonly invalid_union:"invalid_union";readonly invalid_key:"invalid_key";readonly invalid_element:"invalid_element";readonly invalid_value:"invalid_value";readonly custom:"custom";};declare const NEVER:never;type inferFlattenedErrors<T extends core.$ZodType,U=string>=core.$ZodFlattenedError<core.output<T>,U>;type inferFormattedError<T extends core.$ZodType<any,any>,U=string>=core.$ZodFormattedError<core.output<T>,U>;type BRAND<T extends string|number|symbol=string|number|symbol>={[core.$brand]:{[k in T]:true;};};declare function setErrorMap(map:core.$ZodErrorMap):void;declare function getErrorMap():core.$ZodErrorMap<core.$ZodIssue>|undefined;type ZodRawShape=core.$ZodShape;interface StandardSchemaV1<Input=unknown,Output=Input>{readonly"~standard":StandardSchemaV1.Props<Input,Output>;}declare namespace StandardSchemaV1{interface Props<Input=unknown,Output=Input>{readonly version:1;readonly vendor:string;readonly validate:(value:unknown)=>Result<Output>|Promise<Result<Output>>;readonly types?:Types<Input,Output>|undefined;}type Result<Output>=SuccessResult<Output>|FailureResult;interface SuccessResult<Output>{readonly value:Output;readonly issues?:undefined;}interface FailureResult{readonly issues:ReadonlyArray<Issue>;}interface Issue{readonly message:string;readonly path?:ReadonlyArray<PropertyKey|PathSegment>|undefined;}interface PathSegment{readonly key:PropertyKey;}interface Types<Input=unknown,Output=Input>{readonly input:Input;readonly output:Output;}type InferInput<Schema extends StandardSchemaV1>=NonNullable<Schema["~standard"]["types"]>["input"];type InferOutput<Schema extends StandardSchemaV1>=NonNullable<Schema["~standard"]["types"]>["output"];}type Omit$1<T,K extends keyof T>=Pick<T,Exclude<keyof T,K>>;type MakePartial<T,K extends keyof T>=Omit$1<T,K>&InexactPartial<Pick<T,K>>;type InexactPartial<T>={[P in keyof T]?:T[P]|undefined;};type Identity<T>=T;type Flatten<T>=Identity<{[k in keyof T]:T[k];}>;type AnyFunc=(...args:any[])=>any;type MaybeAsync<T>=T|Promise<T>;type Primitive=string|number|symbol|bigint|boolean|null|undefined;type PropValues=Record<string,Set<Primitive>>;type PrimitiveSet=Set<Primitive>;declare abstract class Class{constructor(..._args:any[]);}declare const version:{readonly major:4;readonly minor:0;readonly patch:number;};interface ParseContext<T extends $ZodIssueBase=never>{readonly error?:$ZodErrorMap<T>;readonly reportInput?:boolean;readonly jitless?:boolean;}interface ParseContextInternal<T extends $ZodIssueBase=never>extends ParseContext<T>{readonly async?:boolean|undefined;}interface ParsePayload<T=unknown>{value:T;issues:$ZodRawIssue[];}interface $ZodTypeDef{type:"string"|"number"|"int"|"boolean"|"bigint"|"symbol"|"null"|"undefined"|"void"|"never"|"any"|"unknown"|"date"|"object"|"record"|"file"|"array"|"tuple"|"union"|"intersection"|"map"|"set"|"enum"|"literal"|"nullable"|"optional"|"nonoptional"|"success"|"transform"|"default"|"prefault"|"catch"|"nan"|"pipe"|"readonly"|"template_literal"|"promise"|"lazy"|"custom";error?:$ZodErrorMap<never>|undefined;checks?:$ZodCheck<never>[];}interface _$ZodTypeInternals{version:typeof version;def:$ZodTypeDef;id:string;deferred:AnyFunc[]|undefined;run(payload:ParsePayload<any>,ctx:ParseContextInternal):MaybeAsync<ParsePayload>;parse(payload:ParsePayload<any>,ctx:ParseContextInternal):MaybeAsync<ParsePayload>;traits:Set<string>;optin?:"optional"|undefined;optout?:"optional"|undefined;values?:PrimitiveSet|undefined;propValues?:PropValues|undefined;pattern:RegExp|undefined;constr:new(def:any)=>$ZodType;bag:Record<string,unknown>;isst:$ZodIssueBase;toJSONSchema?:()=>object;parent?:$ZodType|undefined;}interface $ZodTypeInternals<out O=unknown,out I=unknown>extends _$ZodTypeInternals{output:O;input:I;}type $ZodStandardSchema<T>=StandardSchemaV1.Props<input<T>,output<T>>;interface $ZodType<O=unknown,I=unknown,Internals extends $ZodTypeInternals<O,I>=$ZodTypeInternals<O,I>>{_zod:Internals;"~standard":$ZodStandardSchema<this>;}declare const $ZodType:$constructor<$ZodType>;declare global{interface File{}}type ZodTrait={_zod:{def:any;[k:string]:any;};};interface $constructor<T extends ZodTrait,D=T["_zod"]["def"]>{new(def:D):T;init(inst:T,def:D):asserts inst is T;}declare function $constructor<T extends ZodTrait,D=T["_zod"]["def"]>(name:string,initializer:(inst:T,def:D)=>void,params?:{Parent?:typeof Class;}):$constructor<T,D>;type input<T>=T extends{_zod:{input:any;};}?Required<T["_zod"]>["input"]:unknown;type output<T>=T extends{_zod:{output:any;};}?Required<T["_zod"]>["output"]:unknown;interface $ZodCheckDef{check:string;error?:$ZodErrorMap<never>|undefined;abort?:boolean|undefined;}interface $ZodCheckInternals<T>{def:$ZodCheckDef;issc?:$ZodIssueBase;check(payload:ParsePayload<T>):MaybeAsync<void>;onattach:((schema:$ZodType)=>void)[];when?:((payload:ParsePayload)=>boolean)|undefined;}interface $ZodCheck<in T=never>{_zod:$ZodCheckInternals<T>;}declare const $ZodCheck:$constructor<$ZodCheck<any>>;type $ZodStringFormats="email"|"url"|"emoji"|"uuid"|"guid"|"nanoid"|"cuid"|"cuid2"|"ulid"|"xid"|"ksuid"|"datetime"|"date"|"time"|"duration"|"ipv4"|"ipv6"|"cidrv4"|"cidrv6"|"base64"|"base64url"|"json_string"|"e164"|"lowercase"|"uppercase"|"regex"|"jwt"|"starts_with"|"ends_with"|"includes";interface $ZodIssueBase{readonly code?:string;readonly input?:unknown;readonly path:PropertyKey[];readonly message:string;}interface $ZodIssueInvalidType<Input=unknown>extends $ZodIssueBase{readonly code:"invalid_type";readonly expected:$ZodType["_zod"]["def"]["type"];readonly input:Input;}interface $ZodIssueTooBig<Input=unknown>extends $ZodIssueBase{readonly code:"too_big";readonly origin:"number"|"int"|"bigint"|"date"|"string"|"array"|"set"|"file"|(string&{});readonly maximum:number|bigint;readonly inclusive?:boolean;readonly input:Input;}interface $ZodIssueTooSmall<Input=unknown>extends $ZodIssueBase{readonly code:"too_small";readonly origin:"number"|"int"|"bigint"|"date"|"string"|"array"|"set"|"file"|(string&{});readonly minimum:number|bigint;readonly inclusive?:boolean;readonly input:Input;}interface $ZodIssueInvalidStringFormat extends $ZodIssueBase{readonly code:"invalid_format";readonly format:$ZodStringFormats|(string&{});readonly pattern?:string;readonly input:string;}interface $ZodIssueNotMultipleOf<Input extends number|bigint=number|bigint>extends $ZodIssueBase{readonly code:"not_multiple_of";readonly divisor:number;readonly input:Input;}interface $ZodIssueUnrecognizedKeys extends $ZodIssueBase{readonly code:"unrecognized_keys";readonly keys:string[];readonly input:Record<string,unknown>;}interface $ZodIssueInvalidUnion extends $ZodIssueBase{readonly code:"invalid_union";readonly errors:$ZodIssue[][];readonly input:unknown;}interface $ZodIssueInvalidKey<Input=unknown>extends $ZodIssueBase{readonly code:"invalid_key";readonly origin:"map"|"record";readonly issues:$ZodIssue[];readonly input:Input;}interface $ZodIssueInvalidElement<Input=unknown>extends $ZodIssueBase{readonly code:"invalid_element";readonly origin:"map"|"set";readonly key:unknown;readonly issues:$ZodIssue[];readonly input:Input;}interface $ZodIssueInvalidValue<Input=unknown>extends $ZodIssueBase{readonly code:"invalid_value";readonly values:Primitive[];readonly input:Input;}interface $ZodIssueCustom extends $ZodIssueBase{readonly code:"custom";readonly params?:Record<string,any>|undefined;readonly input:unknown;}type $ZodIssue=$ZodIssueInvalidType|$ZodIssueTooBig|$ZodIssueTooSmall|$ZodIssueInvalidStringFormat|$ZodIssueNotMultipleOf|$ZodIssueUnrecognizedKeys|$ZodIssueInvalidUnion|$ZodIssueInvalidKey|$ZodIssueInvalidElement|$ZodIssueInvalidValue|$ZodIssueCustom;type $ZodRawIssue<T extends $ZodIssueBase=$ZodIssue>=T extends any?RawIssue<T>:never;type RawIssue<T extends $ZodIssueBase>=Flatten<MakePartial<T,"message"|"path">&{readonly input?:unknown;readonly inst?:$ZodType|$ZodCheck;readonly continue?:boolean|undefined;}&Record<string,any>>;interface $ZodErrorMap<T extends $ZodIssueBase=$ZodIssue>{(issue:$ZodRawIssue<T>):{message:string;}|string|undefined|null;}declare function export_default$A():{localeError:$ZodErrorMap;};declare function export_default$z():{localeError:$ZodErrorMap;};declare function export_default$y():{localeError:$ZodErrorMap;};declare function export_default$x():{localeError:$ZodErrorMap;};declare function export_default$w():{localeError:$ZodErrorMap;};declare function export_default$v():{localeError:$ZodErrorMap;};declare function export_default$u():{localeError:$ZodErrorMap;};declare function export_default$t():{localeError:$ZodErrorMap;};declare function export_default$s():{localeError:$ZodErrorMap;};declare function export_default$r():{localeError:$ZodErrorMap;};declare function export_default$q():{localeError:$ZodErrorMap;};declare function export_default$p():{localeError:$ZodErrorMap;};declare function export_default$o():{localeError:$ZodErrorMap;};declare function export_default$n():{localeError:$ZodErrorMap;};declare function export_default$m():{localeError:$ZodErrorMap;};declare function export_default$l():{localeError:$ZodErrorMap;};declare function export_default$k():{localeError:$ZodErrorMap;};declare function export_default$j():{localeError:$ZodErrorMap;};declare function export_default$i():{localeError:$ZodErrorMap;};declare function export_default$h():{localeError:$ZodErrorMap;};declare function export_default$g():{localeError:$ZodErrorMap;};declare function export_default$f():{localeError:$ZodErrorMap;};declare function export_default$e():{localeError:$ZodErrorMap;};declare function export_default$d():{localeError:$ZodErrorMap;};declare function export_default$c():{localeError:$ZodErrorMap;};declare function export_default$b():{localeError:$ZodErrorMap;};declare function export_default$a():{localeError:$ZodErrorMap;};declare function export_default$9():{localeError:$ZodErrorMap;};declare function export_default$8():{localeError:$ZodErrorMap;};declare function export_default$7():{localeError:$ZodErrorMap;};declare function export_default$6():{localeError:$ZodErrorMap;};declare function export_default$5():{localeError:$ZodErrorMap;};declare function export_default$4():{localeError:$ZodErrorMap;};declare function export_default$3():{localeError:$ZodErrorMap;};declare function export_default$2():{localeError:$ZodErrorMap;};declare function export_default$1():{localeError:$ZodErrorMap;};declare function export_default():{localeError:$ZodErrorMap;};declare namespace index_d{export{export_default$A as ar,export_default$z as az,export_default$y as be,export_default$x as ca,export_default$w as cs,export_default$v as de,export_default$u as en,export_default$t as es,export_default$s as fa,export_default$r as fi,export_default$q as fr,export_default$p as frCA,export_default$o as he,export_default$n as hu,export_default$m as id,export_default$l as it,export_default$k as ja,export_default$j as kh,export_default$i as ko,export_default$h as mk,export_default$g as ms,export_default$f as nl,export_default$e as no,export_default$d as ota,export_default$c as pl,export_default$b as pt,export_default$a as ru,export_default$9 as sl,export_default$8 as sv,export_default$7 as ta,export_default$6 as th,export_default$5 as tr,export_default$4 as ua,export_default$3 as ur,export_default$2 as vi,export_default$1 as zhCN,export_default as zhTW};}interface ZodISODateTime extends ZodStringFormat{_zod:core.$ZodISODateTimeInternals;}declare const ZodISODateTime:core.$constructor<ZodISODateTime>;declare function datetime(params?:string|core.$ZodISODateTimeParams):ZodISODateTime;interface ZodISODate extends ZodStringFormat{_zod:core.$ZodISODateInternals;}declare const ZodISODate:core.$constructor<ZodISODate>;declare function date$1(params?:string|core.$ZodISODateParams):ZodISODate;interface ZodISOTime extends ZodStringFormat{_zod:core.$ZodISOTimeInternals;}declare const ZodISOTime:core.$constructor<ZodISOTime>;declare function time(params?:string|core.$ZodISOTimeParams):ZodISOTime;interface ZodISODuration extends ZodStringFormat{_zod:core.$ZodISODurationInternals;}declare const ZodISODuration:core.$constructor<ZodISODuration>;declare function duration(params?:string|core.$ZodISODurationParams):ZodISODuration;declare const iso_d_ZodISODate:typeof ZodISODate;declare const iso_d_ZodISODateTime:typeof ZodISODateTime;declare const iso_d_ZodISODuration:typeof ZodISODuration;declare const iso_d_ZodISOTime:typeof ZodISOTime;declare const iso_d_datetime:typeof datetime;declare const iso_d_duration:typeof duration;declare const iso_d_time:typeof time;declare namespace iso_d{export{iso_d_ZodISODate as ZodISODate,iso_d_ZodISODateTime as ZodISODateTime,iso_d_ZodISODuration as ZodISODuration,iso_d_ZodISOTime as ZodISOTime,date$1 as date,iso_d_datetime as datetime,iso_d_duration as duration,iso_d_time as time};}interface ZodCoercedString<T=unknown>extends _ZodString<core.$ZodStringInternals<T>>{}declare function string<T=unknown>(params?:string|core.$ZodStringParams):ZodCoercedString<T>;interface ZodCoercedNumber<T=unknown>extends _ZodNumber<core.$ZodNumberInternals<T>>{}declare function number<T=unknown>(params?:string|core.$ZodNumberParams):ZodCoercedNumber<T>;interface ZodCoercedBoolean<T=unknown>extends _ZodBoolean<core.$ZodBooleanInternals<T>>{}declare function boolean<T=unknown>(params?:string|core.$ZodBooleanParams):ZodCoercedBoolean<T>;interface ZodCoercedBigInt<T=unknown>extends _ZodBigInt<core.$ZodBigIntInternals<T>>{}declare function bigint<T=unknown>(params?:string|core.$ZodBigIntParams):ZodCoercedBigInt<T>;interface ZodCoercedDate<T=unknown>extends _ZodDate<core.$ZodDateInternals<T>>{}declare function date<T=unknown>(params?:string|core.$ZodDateParams):ZodCoercedDate<T>;type coerce_d_ZodCoercedBigInt<T=unknown>=ZodCoercedBigInt<T>;type coerce_d_ZodCoercedBoolean<T=unknown>=ZodCoercedBoolean<T>;type coerce_d_ZodCoercedDate<T=unknown>=ZodCoercedDate<T>;type coerce_d_ZodCoercedNumber<T=unknown>=ZodCoercedNumber<T>;type coerce_d_ZodCoercedString<T=unknown>=ZodCoercedString<T>;declare const coerce_d_bigint:typeof bigint;declare const coerce_d_boolean:typeof boolean;declare const coerce_d_date:typeof date;declare const coerce_d_number:typeof number;declare const coerce_d_string:typeof string;declare namespace coerce_d{export{type coerce_d_ZodCoercedBigInt as ZodCoercedBigInt,type coerce_d_ZodCoercedBoolean as ZodCoercedBoolean,type coerce_d_ZodCoercedDate as ZodCoercedDate,type coerce_d_ZodCoercedNumber as ZodCoercedNumber,type coerce_d_ZodCoercedString as ZodCoercedString,coerce_d_bigint as bigint,coerce_d_boolean as boolean,coerce_d_date as date,coerce_d_number as number,coerce_d_string as string};}declare const z_$brand:typeof $brand;declare const z_$input:typeof $input;declare const z_$output:typeof $output;type z_BRAND<T extends string|number|symbol=string|number|symbol>=BRAND<T>;declare const z_GlobalMeta:typeof GlobalMeta;type z_IssueData=IssueData;declare const z_NEVER:typeof NEVER;type z_RefinementCtx<T=unknown>=RefinementCtx<T>;declare const z_ZodAny:typeof ZodAny;declare const z_ZodArray:typeof ZodArray;declare const z_ZodBase64:typeof ZodBase64;declare const z_ZodBase64URL:typeof ZodBase64URL;declare const z_ZodBigInt:typeof ZodBigInt;declare const z_ZodBigIntFormat:typeof ZodBigIntFormat;declare const z_ZodBoolean:typeof ZodBoolean;declare const z_ZodCIDRv4:typeof ZodCIDRv4;declare const z_ZodCIDRv6:typeof ZodCIDRv6;declare const z_ZodCUID:typeof ZodCUID;declare const z_ZodCUID2:typeof ZodCUID2;declare const z_ZodCatch:typeof ZodCatch;type z_ZodCoercedBigInt<T=unknown>=ZodCoercedBigInt<T>;type z_ZodCoercedBoolean<T=unknown>=ZodCoercedBoolean<T>;type z_ZodCoercedDate<T=unknown>=ZodCoercedDate<T>;type z_ZodCoercedNumber<T=unknown>=ZodCoercedNumber<T>;type z_ZodCoercedString<T=unknown>=ZodCoercedString<T>;declare const z_ZodCustom:typeof ZodCustom;declare const z_ZodDate:typeof ZodDate;declare const z_ZodDefault:typeof ZodDefault;declare const z_ZodDiscriminatedUnion:typeof ZodDiscriminatedUnion;declare const z_ZodE164:typeof ZodE164;declare const z_ZodEmail:typeof ZodEmail;declare const z_ZodEmoji:typeof ZodEmoji;declare const z_ZodEnum:typeof ZodEnum;declare const z_ZodError:typeof ZodError;declare const z_ZodFile:typeof ZodFile;type z_ZodFloat32=ZodFloat32;type z_ZodFloat64=ZodFloat64;declare const z_ZodGUID:typeof ZodGUID;declare const z_ZodIPv4:typeof ZodIPv4;declare const z_ZodIPv6:typeof ZodIPv6;declare const z_ZodISODate:typeof ZodISODate;declare const z_ZodISODateTime:typeof ZodISODateTime;declare const z_ZodISODuration:typeof ZodISODuration;declare const z_ZodISOTime:typeof ZodISOTime;type z_ZodInt=ZodInt;type z_ZodInt32=ZodInt32;declare const z_ZodIntersection:typeof ZodIntersection;type z_ZodIssue=ZodIssue;declare const z_ZodIssueCode:typeof ZodIssueCode;type z_ZodJSONSchema=ZodJSONSchema;type z_ZodJSONSchemaInternals=ZodJSONSchemaInternals;declare const z_ZodJWT:typeof ZodJWT;declare const z_ZodKSUID:typeof ZodKSUID;declare const z_ZodLazy:typeof ZodLazy;declare const z_ZodLiteral:typeof ZodLiteral;declare const z_ZodMap:typeof ZodMap;declare const z_ZodNaN:typeof ZodNaN;declare const z_ZodNanoID:typeof ZodNanoID;declare const z_ZodNever:typeof ZodNever;declare const z_ZodNonOptional:typeof ZodNonOptional;declare const z_ZodNull:typeof ZodNull;declare const z_ZodNullable:typeof ZodNullable;declare const z_ZodNumber:typeof ZodNumber;declare const z_ZodNumberFormat:typeof ZodNumberFormat;declare const z_ZodObject:typeof ZodObject;declare const z_ZodOptional:typeof ZodOptional;declare const z_ZodPipe:typeof ZodPipe;declare const z_ZodPrefault:typeof ZodPrefault;declare const z_ZodPromise:typeof ZodPromise;type z_ZodRawShape=ZodRawShape;declare const z_ZodReadonly:typeof ZodReadonly;declare const z_ZodRealError:typeof ZodRealError;declare const z_ZodRecord:typeof ZodRecord;type z_ZodSafeParseError<T>=ZodSafeParseError<T>;type z_ZodSafeParseResult<T>=ZodSafeParseResult<T>;type z_ZodSafeParseSuccess<T>=ZodSafeParseSuccess<T>;declare const z_ZodSet:typeof ZodSet;declare const z_ZodString:typeof ZodString;declare const z_ZodStringFormat:typeof ZodStringFormat;declare const z_ZodSuccess:typeof ZodSuccess;declare const z_ZodSymbol:typeof ZodSymbol;declare const z_ZodTemplateLiteral:typeof ZodTemplateLiteral;declare const z_ZodTransform:typeof ZodTransform;declare const z_ZodTuple:typeof ZodTuple;declare const z_ZodType:typeof ZodType;type z_ZodUInt32=ZodUInt32;declare const z_ZodULID:typeof ZodULID;declare const z_ZodURL:typeof ZodURL;declare const z_ZodUUID:typeof ZodUUID;declare const z_ZodUndefined:typeof ZodUndefined;declare const z_ZodUnion:typeof ZodUnion;declare const z_ZodUnknown:typeof ZodUnknown;declare const z_ZodVoid:typeof ZodVoid;declare const z_ZodXID:typeof ZodXID;type z__ZodBigInt<T extends core.$ZodBigIntInternals=core.$ZodBigIntInternals>=_ZodBigInt<T>;type z__ZodBoolean<T extends core.$ZodBooleanInternals=core.$ZodBooleanInternals>=_ZodBoolean<T>;type z__ZodDate<T extends core.$ZodDateInternals=core.$ZodDateInternals>=_ZodDate<T>;type z__ZodNumber<Internals extends core.$ZodNumberInternals=core.$ZodNumberInternals>=_ZodNumber<Internals>;declare const z__ZodString:typeof _ZodString;type z__ZodType<out Internals extends core.$ZodTypeInternals=core.$ZodTypeInternals>=_ZodType<Internals>;declare const z__default:typeof _default;declare const z_any:typeof any;declare const z_array:typeof array;declare const z_base64:typeof base64;declare const z_base64url:typeof base64url;declare const z_check:typeof check;declare const z_cidrv4:typeof cidrv4;declare const z_cidrv6:typeof cidrv6;declare const z_clone:typeof clone;declare const z_config:typeof config;declare const z_core:typeof core;declare const z_cuid:typeof cuid;declare const z_cuid2:typeof cuid2;declare const z_custom:typeof custom;declare const z_discriminatedUnion:typeof discriminatedUnion;declare const z_e164:typeof e164;declare const z_email:typeof email;declare const z_emoji:typeof emoji;declare const z_file:typeof file;declare const z_flattenError:typeof flattenError;declare const z_float32:typeof float32;declare const z_float64:typeof float64;declare const z_formatError:typeof formatError;declare const z_getErrorMap:typeof getErrorMap;declare const z_globalRegistry:typeof globalRegistry;declare const z_guid:typeof guid;declare const z_infer:typeof infer;type z_inferFlattenedErrors<T extends core.$ZodType,U=string>=inferFlattenedErrors<T,U>;type z_inferFormattedError<T extends core.$ZodType<any,any>,U=string>=inferFormattedError<T,U>;declare const z_int:typeof int;declare const z_int32:typeof int32;declare const z_int64:typeof int64;declare const z_intersection:typeof intersection;declare const z_ipv4:typeof ipv4;declare const z_ipv6:typeof ipv6;declare const z_json:typeof json;declare const z_jwt:typeof jwt;declare const z_keyof:typeof keyof;declare const z_ksuid:typeof ksuid;declare const z_lazy:typeof lazy;declare const z_literal:typeof literal;declare const z_looseObject:typeof looseObject;declare const z_map:typeof map;declare const z_nan:typeof nan;declare const z_nanoid:typeof nanoid;declare const z_nativeEnum:typeof nativeEnum;declare const z_never:typeof never;declare const z_nonoptional:typeof nonoptional;declare const z_nullable:typeof nullable;declare const z_nullish:typeof nullish;declare const z_object:typeof object;declare const z_optional:typeof optional;declare const z_parse:typeof parse;declare const z_parseAsync:typeof parseAsync;declare const z_partialRecord:typeof partialRecord;declare const z_pipe:typeof pipe;declare const z_prefault:typeof prefault;declare const z_preprocess:typeof preprocess;declare const z_prettifyError:typeof prettifyError;declare const z_promise:typeof promise;declare const z_readonly:typeof readonly;declare const z_record:typeof record;declare const z_refine:typeof refine;declare const z_regexes:typeof regexes;declare const z_registry:typeof registry;declare const z_safeParse:typeof safeParse;declare const z_safeParseAsync:typeof safeParseAsync;declare const z_set:typeof set;declare const z_setErrorMap:typeof setErrorMap;declare const z_strictObject:typeof strictObject;declare const z_stringbool:typeof stringbool;declare const z_success:typeof success;declare const z_superRefine:typeof superRefine;declare const z_symbol:typeof symbol;declare const z_templateLiteral:typeof templateLiteral;declare const z_toJSONSchema:typeof toJSONSchema;declare const z_transform:typeof transform;declare const z_treeifyError:typeof treeifyError;declare const z_tuple:typeof tuple;declare const z_uint32:typeof uint32;declare const z_uint64:typeof uint64;declare const z_ulid:typeof ulid;declare const z_union:typeof union;declare const z_unknown:typeof unknown;declare const z_url:typeof url;declare const z_uuid:typeof uuid;declare const z_uuidv4:typeof uuidv4;declare const z_uuidv6:typeof uuidv6;declare const z_uuidv7:typeof uuidv7;declare const z_xid:typeof xid;declare namespace z{export{z_$brand as $brand,z_$input as $input,z_$output as $output,type z_BRAND as BRAND,z_GlobalMeta as GlobalMeta,output$1 as Infer,type z_IssueData as IssueData,z_NEVER as NEVER,type z_RefinementCtx as RefinementCtx,ZodType as Schema,output$1 as TypeOf,z_ZodAny as ZodAny,z_ZodArray as ZodArray,z_ZodBase64 as ZodBase64,z_ZodBase64URL as ZodBase64URL,z_ZodBigInt as ZodBigInt,z_ZodBigIntFormat as ZodBigIntFormat,z_ZodBoolean as ZodBoolean,z_ZodCIDRv4 as ZodCIDRv4,z_ZodCIDRv6 as ZodCIDRv6,z_ZodCUID as ZodCUID,z_ZodCUID2 as ZodCUID2,z_ZodCatch as ZodCatch,type z_ZodCoercedBigInt as ZodCoercedBigInt,type z_ZodCoercedBoolean as ZodCoercedBoolean,type z_ZodCoercedDate as ZodCoercedDate,type z_ZodCoercedNumber as ZodCoercedNumber,type z_ZodCoercedString as ZodCoercedString,z_ZodCustom as ZodCustom,z_ZodDate as ZodDate,z_ZodDefault as ZodDefault,z_ZodDiscriminatedUnion as ZodDiscriminatedUnion,z_ZodE164 as ZodE164,z_ZodEmail as ZodEmail,z_ZodEmoji as ZodEmoji,z_ZodEnum as ZodEnum,z_ZodError as ZodError,$ZodErrorMap$1 as ZodErrorMap,z_ZodFile as ZodFile,$ZodTypes as ZodFirstPartySchemaTypes,$ZodFlattenedError as ZodFlattenedError,type z_ZodFloat32 as ZodFloat32,type z_ZodFloat64 as ZodFloat64,$ZodFormattedError as ZodFormattedError,z_ZodGUID as ZodGUID,z_ZodIPv4 as ZodIPv4,z_ZodIPv6 as ZodIPv6,z_ZodISODate as ZodISODate,z_ZodISODateTime as ZodISODateTime,z_ZodISODuration as ZodISODuration,z_ZodISOTime as ZodISOTime,type z_ZodInt as ZodInt,type z_ZodInt32 as ZodInt32,z_ZodIntersection as ZodIntersection,type z_ZodIssue as ZodIssue,z_ZodIssueCode as ZodIssueCode,type z_ZodJSONSchema as ZodJSONSchema,type z_ZodJSONSchemaInternals as ZodJSONSchemaInternals,z_ZodJWT as ZodJWT,z_ZodKSUID as ZodKSUID,z_ZodLazy as ZodLazy,z_ZodLiteral as ZodLiteral,z_ZodMap as ZodMap,z_ZodNaN as ZodNaN,z_ZodNanoID as ZodNanoID,z_ZodNever as ZodNever,z_ZodNonOptional as ZodNonOptional,z_ZodNull as ZodNull,z_ZodNullable as ZodNullable,z_ZodNumber as ZodNumber,z_ZodNumberFormat as ZodNumberFormat,z_ZodObject as ZodObject,z_ZodOptional as ZodOptional,z_ZodPipe as ZodPipe,z_ZodPrefault as ZodPrefault,z_ZodPromise as ZodPromise,type z_ZodRawShape as ZodRawShape,z_ZodReadonly as ZodReadonly,z_ZodRealError as ZodRealError,z_ZodRecord as ZodRecord,type z_ZodSafeParseError as ZodSafeParseError,type z_ZodSafeParseResult as ZodSafeParseResult,type z_ZodSafeParseSuccess as ZodSafeParseSuccess,ZodType as ZodSchema,z_ZodSet as ZodSet,z_ZodString as ZodString,z_ZodStringFormat as ZodStringFormat,z_ZodSuccess as ZodSuccess,z_ZodSymbol as ZodSymbol,z_ZodTemplateLiteral as ZodTemplateLiteral,z_ZodTransform as ZodTransform,z_ZodTuple as ZodTuple,z_ZodType as ZodType,ZodType as ZodTypeAny,type z_ZodUInt32 as ZodUInt32,z_ZodULID as ZodULID,z_ZodURL as ZodURL,z_ZodUUID as ZodUUID,z_ZodUndefined as ZodUndefined,z_ZodUnion as ZodUnion,z_ZodUnknown as ZodUnknown,z_ZodVoid as ZodVoid,z_ZodXID as ZodXID,type z__ZodBigInt as _ZodBigInt,type z__ZodBoolean as _ZodBoolean,type z__ZodDate as _ZodDate,type z__ZodNumber as _ZodNumber,z__ZodString as _ZodString,type z__ZodType as _ZodType,z__default as _default,z_any as any,z_array as array,z_base64 as base64,z_base64url as base64url,bigint$1 as bigint,boolean$1 as boolean,_catch as catch,z_check as check,z_cidrv4 as cidrv4,z_cidrv6 as cidrv6,z_clone as clone,coerce_d as coerce,z_config as config,z_core as core,z_cuid as cuid,z_cuid2 as cuid2,z_custom as custom,date$2 as date,z_discriminatedUnion as discriminatedUnion,z_e164 as e164,z_email as email,z_emoji as emoji,_endsWith as endsWith,_enum as enum,z_file as file,z_flattenError as flattenError,z_float32 as float32,z_float64 as float64,z_formatError as formatError,_function as function,z_getErrorMap as getErrorMap,z_globalRegistry as globalRegistry,_gt as gt,_gte as gte,z_guid as guid,_includes as includes,z_infer as infer,type z_inferFlattenedErrors as inferFlattenedErrors,type z_inferFormattedError as inferFormattedError,input$1 as input,_instanceof as instanceof,z_int as int,z_int32 as int32,z_int64 as int64,z_intersection as intersection,z_ipv4 as ipv4,z_ipv6 as ipv6,iso_d as iso,z_json as json,z_jwt as jwt,z_keyof as keyof,z_ksuid as ksuid,z_lazy as lazy,_length as length,z_literal as literal,index_d as locales,z_looseObject as looseObject,_lowercase as lowercase,_lt as lt,_lte as lte,z_map as map,_maxLength as maxLength,_maxSize as maxSize,_mime as mime,_minLength as minLength,_minSize as minSize,_multipleOf as multipleOf,z_nan as nan,z_nanoid as nanoid,z_nativeEnum as nativeEnum,_negative as negative,z_never as never,_nonnegative as nonnegative,z_nonoptional as nonoptional,_nonpositive as nonpositive,_normalize as normalize,_null as null,z_nullable as nullable,z_nullish as nullish,number$1 as number,z_object as object,z_optional as optional,output$1 as output,_overwrite as overwrite,z_parse as parse,z_parseAsync as parseAsync,z_partialRecord as partialRecord,z_pipe as pipe,_positive as positive,z_prefault as prefault,z_preprocess as preprocess,z_prettifyError as prettifyError,z_promise as promise,_property as property,z_readonly as readonly,z_record as record,z_refine as refine,_regex as regex,z_regexes as regexes,z_registry as registry,z_safeParse as safeParse,z_safeParseAsync as safeParseAsync,z_set as set,z_setErrorMap as setErrorMap,_size as size,_startsWith as startsWith,z_strictObject as strictObject,string$1 as string,z_stringbool as stringbool,z_success as success,z_superRefine as superRefine,z_symbol as symbol,z_templateLiteral as templateLiteral,z_toJSONSchema as toJSONSchema,_toLowerCase as toLowerCase,_toUpperCase as toUpperCase,z_transform as transform,z_treeifyError as treeifyError,_trim as trim,z_tuple as tuple,z_uint32 as uint32,z_uint64 as uint64,z_ulid as ulid,_undefined as undefined,z_union as union,z_unknown as unknown,_uppercase as uppercase,z_url as url,z_uuid as uuid,z_uuidv4 as uuidv4,z_uuidv6 as uuidv6,z_uuidv7 as uuidv7,_void as void,z_xid as xid};}export{type BRAND,type IssueData,NEVER,type RefinementCtx,ZodType as Schema,ZodAny,ZodArray,ZodBase64,ZodBase64URL,ZodBigInt,ZodBigIntFormat,ZodBoolean,ZodCIDRv4,ZodCIDRv6,ZodCUID,ZodCUID2,ZodCatch,type ZodCoercedBigInt,type ZodCoercedBoolean,type ZodCoercedDate,type ZodCoercedNumber,type ZodCoercedString,ZodCustom,ZodDate,ZodDefault,ZodDiscriminatedUnion,ZodE164,ZodEmail,ZodEmoji,ZodEnum,ZodError,ZodFile,type ZodFloat32,type ZodFloat64,ZodGUID,ZodIPv4,ZodIPv6,ZodISODate,ZodISODateTime,ZodISODuration,ZodISOTime,type ZodInt,type ZodInt32,ZodIntersection,type ZodIssue,ZodIssueCode,type ZodJSONSchema,type ZodJSONSchemaInternals,ZodJWT,ZodKSUID,ZodLazy,ZodLiteral,ZodMap,ZodNaN,ZodNanoID,ZodNever,ZodNonOptional,ZodNull,ZodNullable,ZodNumber,ZodNumberFormat,ZodObject,ZodOptional,ZodPipe,ZodPrefault,ZodPromise,type ZodRawShape,ZodReadonly,ZodRealError,ZodRecord,type ZodSafeParseError,type ZodSafeParseResult,type ZodSafeParseSuccess,ZodType as ZodSchema,ZodSet,ZodString,ZodStringFormat,ZodSuccess,ZodSymbol,ZodTemplateLiteral,ZodTransform,ZodTuple,ZodType,ZodType as ZodTypeAny,type ZodUInt32,ZodULID,ZodURL,ZodUUID,ZodUndefined,ZodUnion,ZodUnknown,ZodVoid,ZodXID,type _ZodBigInt,type _ZodBoolean,type _ZodDate,type _ZodNumber,_ZodString,type _ZodType,_default,any,array,base64,base64url,bigint$1 as bigint,boolean$1 as boolean,_catch as catch,check,cidrv4,cidrv6,coerce_d as coerce,cuid,cuid2,custom,date$2 as date,discriminatedUnion,e164,email,emoji,_enum as enum,file,float32,float64,getErrorMap,guid,type inferFlattenedErrors,type inferFormattedError,_instanceof as instanceof,int,int32,int64,intersection,ipv4,ipv6,iso_d as iso,json,jwt,keyof,ksuid,lazy,literal,index_d as locales,looseObject,map,nan,nanoid,nativeEnum,never,nonoptional,_null as null,nullable,nullish,number$1 as number,object,optional,parse,parseAsync,partialRecord,pipe,prefault,preprocess,promise,readonly,record,refine,safeParse,safeParseAsync,set,setErrorMap,strictObject,string$1 as string,stringbool,success,superRefine,symbol,templateLiteral,transform,tuple,uint32,uint64,ulid,_undefined as undefined,union,unknown,url,uuid,uuidv4,uuidv6,uuidv7,_void as void,xid,z};