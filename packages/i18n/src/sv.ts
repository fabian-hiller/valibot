import type { Language } from './types';

// prettier-ignore
const language: Language = {
  code:             'sv',
  schema:           (issue) => `Ogiltig typ: Förväntade ${issue.expected}, men fick ${issue.received}`,
  specific: {
    base64:         (issue) => `Ogiltig Base64: Fick ${issue.received}`,
    bic:            (issue) => `Ogiltigt BIC: Fick ${issue.received}`,
    bytes:          (issue) => `Ogiltiga bytes: Förväntade ${issue.expected}, men fick ${issue.received}`, 
    check:          (issue) => `Ogiltig indata: Fick ${issue.received}`,
    checkAsync:     (issue) => `Ogiltig indata: Fick ${issue.received}`,
    checkItems:     (issue) => `Ogiltigt element: Fick ${issue.received}`,
    creditCard:     (issue) => `Ogiltigt kreditkort: Fick ${issue.received}`,
    cuid2:          (issue) => `Ogiltigt Cuid2: Fick ${issue.received}`,
    decimal:        (issue) => `Ogiltig decimal: Fick ${issue.received}`,
    digits:         (issue) => `Ogiltigt nummer: Fick ${issue.received}`,
    email:          (issue) => `Ogiltig email: Fick ${issue.received}`,
    emoji:          (issue) => `Ogiltig emoji: Fick ${issue.received}`,
    empty:          (issue) => `Ogiltig längd: Förväntade ${issue.expected}, men fick ${issue.received}`,
    endsWith:       (issue) => `Ogiltigt slut: Förväntade ${issue.expected}, men fick ${issue.received}`,
    everyItem:      (issue) => `Ogiltigt element: Fick ${issue.received}`,
    excludes:       (issue) => `Ogiltigt innehåll: Förväntade ${issue.expected}, men fick ${issue.received}`,
    finite:         (issue) => `Ogiltig ändlig: Förväntade ${issue.received}`,
    hash:           (issue) => `Ogiltig hash: Fick ${issue.received}`,
    hexColor:       (issue) => `Ogiltig hexadecimal färg: Fick ${issue.received}`,
    hexadecimal:    (issue) => `Ogiltig hexadecimal: Fick ${issue.received}`,
    imei:           (issue) => `Ogiltigt IMEI: Fick ${issue.received}`,
    includes:       (issue) => `Ogiltigt innehåll: Förväntade ${issue.expected}, men fick ${issue.received}`,
    integer:        (issue) => `Ogiltigt heltal: Fick ${issue.received}`,
    ip:             (issue) => `Ogiltig IP: Fick ${issue.received}`,
    ipv4:           (issue) => `Ogiltig IPv4: Fick ${issue.received}`,
    ipv6:           (issue) => `Ogiltig IPv6: Fick ${issue.received}`,
    isoDate:        (issue) => `Ogiltigt datum: Fick ${issue.received}`,
    isoDateTime:    (issue) => `Ogiltig datum-tid: Fick ${issue.received}`, 
    isoTime:        (issue) => `Ogiltig tid: Fick ${issue.received}`,
    isoTimeSecond:  (issue) => `Ogiltig sekund: Fick ${issue.received}`,
    isoTimestamp:   (issue) => `Ogiltig tidsstämpel: Fick ${issue.received}`,
    isoWeek:        (issue) => `Ogiltig vecka: Fick ${issue.received}`,
    length:         (issue) => `Ogiltig längd: Förväntade ${issue.expected}, men fick ${issue.received}`,
    mac:            (issue) => `Ogiltig MAC: Fick ${issue.received}`,
    mac48:          (issue) => `Ogiltig 48-bit MAC: Fick ${issue.received}`,
    mac64:          (issue) => `Ogiltig 64-bit MAC: Fick ${issue.received}`,
    maxBytes:       (issue) => `Ogiltiga bytes: Fick ${issue.expected}, men förväntade ${issue.received}`,
    maxLength:      (issue) => `Ogiltig längd: Förväntade ${issue.expected}, men fick ${issue.received}`,
    maxSize:        (issue) => `Ogiltig storlek: Förväntade ${issue.expected}, men fick ${issue.received}`,
    maxValue:       (issue) => `Ogiltigt värde: Förväntade ${issue.expected}, men fick ${issue.received}`,
    mimeType:       (issue) => `Ogiltig MIME typ: Förväntade ${issue.expected}, men fick ${issue.received}`,
    minBytes:       (issue) => `Ogiltiga bytes: Förväntade ${issue.expected}, men fick ${issue.received}`,
    minLength:      (issue) => `Ogiltig längd: Förväntade ${issue.expected}, men fick ${issue.received}`,
    minSize:        (issue) => `Ogiltig storlek: Förväntade ${issue.expected}, men fick ${issue.received}`,
    minValue:       (issue) => `Ogiltigt värde: Förväntade ${issue.expected}, men fick ${issue.received}`,
    multipleOf:     (issue) => `Ogiltig multipel: Förväntade ${issue.expected}, men fick ${issue.received}`,
    nanoid:         (issue) => `Ogiltigt Nano ID: Fick ${issue.received}`,
    nonEmpty:       (issue) => `Ogiltig längd: Förväntade ${issue.expected}, men fick ${issue.received}`,
    notBytes:       (issue) => `Ogiltiga bytes: Förväntade ${issue.expected}, men fick ${issue.received}`, 
    notLength:      (issue) => `Ogiltig längd: Förväntade ${issue.expected}, men fick ${issue.received}`, 
    notSize:        (issue) => `Ogiltig storlek: Förväntade ${issue.expected}, men fick ${issue.received}`, 
    notValue:       (issue) => `Ogiltigt värde: Förväntade ${issue.expected}, men fick ${issue.received}`, 
    octal:          (issue) => `Ogiltig oktal: Fick ${issue.received}`,
    partialCheck:   (issue) => `Ogiltig indata: Fick ${issue.received}`,
    regex:          (issue) => `Ogiltigt format: Förväntade ${issue.expected}, men fick ${issue.received}`,
    safeInteger:    (issue) => `Ogiltigt säkert heltal: Förväntade ${issue.received}`, 
    size:           (issue) => `Ogiltig storlek: Förväntade ${issue.expected}, men fick ${issue.received}`,
    someItem:       (issue) => `Ogiltigt element: Fick ${issue.received}`,
    startsWith:     (issue) => `Ogiltig start: Förväntade ${issue.expected}, men fick ${issue.received}`,
    ulid:           (issue) => `Ogiltigt ULID: Fick ${issue.received}`,
    url:            (issue) => `Ogiltig URL: Fick ${issue.received}`,
    uuid:           (issue) => `Ogiltigt UUID: Fick ${issue.received}`,
    value:          (issue) => `Ogiltigt värde: Förväntade ${issue.expected}, men fick ${issue.received}`,
  },
};

export default language;
