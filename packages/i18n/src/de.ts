import { Language } from './types';

// prettier-ignore
const language: Language = {
  code:             'de',
  schema:           (issue) => `Ungültiger Typ: ${issue.expected} erwartet aber ${issue.received} erhalten`,
  specific: {
    bic:            (issue) => `Ungültiger BIC: ${issue.received} erhalten`,
    bytes:          (issue) => `Ungültige Bytes: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    creditCard:     (issue) => `Ungültige Kreditkarte: ${issue.received} erhalten`,
    cuid2:          (issue) => `Ungültige Cuid2: ${issue.received} erhalten`,
    custom:         (issue) => `Ungültige Eingabe: ${issue.received} erhalten`,
    customAsync:    (issue) => `Ungültige Eingabe: ${issue.received} erhalten`,
    decimal:        (issue) => `Ungültige Dezimale: ${issue.received} erhalten`,
    email:          (issue) => `Ungültige E-Mail: ${issue.received} erhalten`,
    emoji:          (issue) => `Ungültiges Emoji: ${issue.received} erhalten`,
    endsWith:       (issue) => `Ungültiges Ende: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    equal:          (issue) => `Ungültiger Wert: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    excludes:       (issue) => `Ungültiger Inhalt: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    finite:         (issue) => `Ungültiges Endliche: ${issue.received} erhalten`,
    hash:           (issue) => `Ungültiger Hash: ${issue.received} erhalten`,
    hexColor:       (issue) => `Ungültige Hex-Farbe: ${issue.received} erhalten`,
    hexadecimal:    (issue) => `Ungültige Hexadezimale: ${issue.received} erhalten`,
    imei:           (issue) => `Ungültige IMEI: ${issue.received} erhalten`,
    includes:       (issue) => `Ungültiger Inhalt: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    integer:        (issue) => `Ungültige Ganzzahl: ${issue.received} erhalten`,
    ip:             (issue) => `Ungültige IP: ${issue.received} erhalten`,
    ipv4:           (issue) => `Ungültige IPv4: ${issue.received} erhalten`,
    ipv6:           (issue) => `Ungültige IPv6: ${issue.received} erhalten`,
    isoDate:        (issue) => `Ungültiges Datum: ${issue.received} erhalten`,
    isoDateTime:    (issue) => `Ungültige Datums-Zeit: ${issue.received} erhalten`,
    isoTime:        (issue) => `Ungültige Zeit: ${issue.received} erhalten`,
    isoTimeSecond:  (issue) => `Ungültige Zeitsekunde: ${issue.received} erhalten`,
    isoTimestamp:   (issue) => `Ungültiger Zeitstempel: ${issue.received} erhalten`,
    isoWeek:        (issue) => `Ungültige Woche: ${issue.received} erhalten`,
    length:         (issue) => `Ungültige Länge: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    mac:            (issue) => `Ungültige MAC: ${issue.received} erhalten`,
    mac48:          (issue) => `Ungültige 48-bit MAC: ${issue.received} erhalten`,
    mac64:          (issue) => `Ungültige 64-bit MAC: ${issue.received} erhalten`,
    maxBytes:       (issue) => `Ungültige Bytes: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    maxLength:      (issue) => `Ungültige Länge: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    maxSize:        (issue) => `Ungültige Größe: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    maxValue:       (issue) => `Ungültiger Wert: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    mimeType:       (issue) => `Ungültiger MIME-Typ: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    minBytes:       (issue) => `Ungültige Bytes: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    minLength:      (issue) => `Ungültige Länge: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    minSize:        (issue) => `Ungültige Größe: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    minValue:       (issue) => `Ungültiger Wert: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    multipleOf:     (issue) => `Ungültiges Vielfaches: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    notBytes:       (issue) => `Ungültige Bytes: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    notLength:      (issue) => `Ungültige Länge: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    notSize:        (issue) => `Ungültige Größe: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    notValue:       (issue) => `Ungültiger Wert: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    octal:          (issue) => `Ungültiges Octal: ${issue.received} erhalten`,
    regex:          (issue) => `Ungültiges Format: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    safeInteger:    (issue) => `Ungültige sichere Ganzzahl: ${issue.received} erhalten`,
    size:           (issue) => `Ungültige Größe: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    startsWith:     (issue) => `Ungültiger Start: ${issue.expected} erwartet aber ${issue.received} erhalten`,
    ulid:           (issue) => `Ungültige ULID: ${issue.received} erhalten`,
    url:            (issue) => `Ungültige URL: ${issue.received} erhalten`,
    uuid:           (issue) => `Ungültige UUID: ${issue.received} erhalten`,
    value:          (issue) => `Ungültiger Wert: ${issue.expected} erwartet aber ${issue.received} erhalten`,
  },
};

export default language;
