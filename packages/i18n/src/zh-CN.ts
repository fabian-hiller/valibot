import { Language } from './types';

// prettier-ignore
const language: Language = {
  code:             'zh-CN',
  schema:           (issue) => `无效的类型：预期为 ${issue.expected}，而输入为 ${issue.received}`,
  specific: {
    bic:            (issue) => `无效的商业标识符：输入为 ${issue.received}`,
    bytes:          (issue) => `无效的字节长度：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    creditCard:     (issue) => `无效的信用卡：输入为 ${issue.received}`,
    cuid2:          (issue) => `无效的 Cuid2：输入为 ${issue.received}`,
    custom:         (issue) => `无效的输入：输入为 ${issue.received}`,
    customAsync:    (issue) => `无效的输入：输入为 ${issue.received}`,
    decimal:        (issue) => `无效的十进制：输入为 ${issue.received}`,
    email:          (issue) => `无效的邮箱地址：输入为 ${issue.received}`,
    emoji:          (issue) => `无效的 emoji：输入为 ${issue.received}`,
    endsWith:       (issue) => `无效的结尾：预期结尾为 ${issue.expected}，而输入为 ${issue.received}`,
    equal:          (issue) => `无效的值：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    excludes:       (issue) => `无效的内容：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    finite:         (issue) => `无效的有限数：输入为 ${issue.received}`,
    hash:           (issue) => `无效的哈希值：输入为 ${issue.received}`,
    hexColor:       (issue) => `无效的十六进制颜色：输入为 ${issue.received}`,
    hexadecimal:    (issue) => `无效的十六进制：输入为 ${issue.received}`,
    imei:           (issue) => `无效的国际移动设备识别码：输入为 ${issue.received}`,
    includes:       (issue) => `无效的内容：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    integer:        (issue) => `无效的整数：输入为 ${issue.received}`,
    ip:             (issue) => `无效的 IP：输入为 ${issue.received}`,
    ipv4:           (issue) => `无效的 IPv4：输入为 ${issue.received}`,
    ipv6:           (issue) => `无效的 IPv6：输入为 ${issue.received}`,
    isoDate:        (issue) => `无效的日期：输入为 ${issue.received}`,
    isoDateTime:    (issue) => `无效的日期时间：输入为 ${issue.received}`,
    isoTime:        (issue) => `无效的时间：输入为 ${issue.received}`,
    isoTimeSecond:  (issue) => `无效的秒级时间：输入为 ${issue.received}`,
    isoTimestamp:   (issue) => `无效的时间戳：输入为 ${issue.received}`,
    isoWeek:        (issue) => `无效的周数：输入为 ${issue.received}`,
    length:         (issue) => `无效的长度：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    mac:            (issue) => `无效的 MAC：输入为 ${issue.received}`,
    mac48:          (issue) => `无效的 48 位 MAC：输入为 ${issue.received}`,
    mac64:          (issue) => `无效的 64 位 MAC：输入为 ${issue.received}`,
    maxBytes:       (issue) => `无效的字节长度：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    maxLength:      (issue) => `无效的长度：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    maxSize:        (issue) => `无效的大小：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    maxValue:       (issue) => `无效的值：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    mimeType:       (issue) => `无效的媒体类型：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    minBytes:       (issue) => `无效的字节长度：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    minLength:      (issue) => `无效的长度：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    minSize:        (issue) => `无效的大小：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    minValue:       (issue) => `无效的值：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    multipleOf:     (issue) => `无效的倍数：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    notBytes:       (issue) => `无效的字节长度：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    notLength:      (issue) => `无效的长度：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    notSize:        (issue) => `无效的大小：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    notValue:       (issue) => `无效的值：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    octal:          (issue) => `无效的八进制：输入为 ${issue.received}`,
    regex:          (issue) => `无效的格式：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    safeInteger:    (issue) => `无效的安全整数：输入为 ${issue.received}`,
    size:           (issue) => `无效的大小：预期为 ${issue.expected}，而输入为 ${issue.received}`,
    startsWith:     (issue) => `无效的开头：预期开头为 ${issue.expected}，而输入为 ${issue.received}`,
    ulid:           (issue) => `无效的 ULID：输入为 ${issue.received}`,
    url:            (issue) => `无效的 URL：输入为 ${issue.received}`,
    uuid:           (issue) => `无效的 UUID：输入为 ${issue.received}`,
    value:          (issue) => `无效的值：预期为 ${issue.expected}，而输入为 ${issue.received}`,
  },
};

export default language;
